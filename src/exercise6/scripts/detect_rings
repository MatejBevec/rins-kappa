#!/usr/bin/python3
import os
import sys
import time

import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
import copy
from color_classify.classify import classify_wrapper
import tempfile

import message_filters


class The_Ring:
    def __init__(self):
        rospy.init_node('ring_detector', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        # self.depth_sub = rospy.Subscriber("/camera/depth_registered/image_raw", Image, self.depth_callback)

        # SYNCHRONIZED SUBSCRIBERS
        self.rgb_sub = message_filters.Subscriber("/camera/rgb/image_raw", Image)
        self.depth_sub = message_filters.Subscriber("/camera/depth/image_raw", Image)
        self.rgb_cache = message_filters.Cache(self.rgb_sub, 100)
        self.depth_cache = message_filters.Cache(self.depth_sub, 100)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('confirmed_rings', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)

        self.images = []
        self.tempdir = None

    def get_pose(self, e, dist, stamp):
        print(f"{e=}  {dist=}  {stamp=}")
        # Calculate the position of the detected ellipse

        k_f = 554  # kinect focal length in pixels

        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]

        angle_to_target = np.arctan2(elipse_x, k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist * np.cos(angle_to_target), dist * np.sin(angle_to_target)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp

        print(point_s)
        # Get the point in the "map" coordinate system
        point_world = self.tf_buf.transform_full(point_s, "map", stamp, "map")
        print(f"{point_world=}")

        # Create a Pose object with the same position
        pose = Pose()
        print(f"({point_world.point.x}, {point_world.point.y}, {point_world.point.z})")
        pose.position.x = point_world.point.x
        pose.position.y = point_world.point.y
        pose.position.z = point_world.point.z

        # Create a marker used for visualization
        self.marker_num += 1
        marker = Marker()
        marker.header.stamp = point_world.header.stamp
        marker.header.frame_id = point_world.header.frame_id
        marker.pose = pose
        marker.type = Marker.CUBE
        marker.action = Marker.ADD
        marker.frame_locked = False
        marker.lifetime = rospy.Duration.from_sec(20)
        marker.id = self.marker_num
        marker.scale = Vector3(0.1, 0.1, 0.1)
        marker.color = ColorRGBA(0, 1, 0, 1)
        self.marker_array.markers.append(marker)

        self.markers_pub.publish(self.marker_array)

    def image_callback(self):
        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = self.rgb_cache.getElemBeforeTime(rospy.Time.now())
            if not rgb_image_message:
                print("No msg yet")
                return
            rgb_stamp = rgb_image_message.header.stamp

            depth_image_message = self.depth_cache.getElemBeforeTime(rgb_stamp)
            if not depth_image_message:
                print("No msg yet")
                return
        except Exception as e:
            print(e)
            return 0

        rgb_time = rgb_image_message.header.stamp
        depth_time = depth_image_message.header.stamp
        rospy.loginfo(f"{rgb_time=} {depth_time=}")

        try:
            cv_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        # Tranform image to gayscale
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)

        # Do histogram equlization
        img = cv2.equalizeHist(gray)

        # Binarize the image
        # ret, thresh = cv2.threshold(img, 50, 255, 0)
        ret, thresh = cv2.threshold(img, 50, 255, cv2.THRESH_BINARY)

        # Extract contours
        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        # Example how to draw the contours
        # cv2.drawContours(img, contours, -1, (255, 0, 0), 3)

        # Fit elipses to all extracted contours
        elps = []
        for cnt in contours:
            #     print cnt
            #     print cnt.shape
            if cnt.shape[0] >= 20:
                ellipse = cv2.fitEllipse(cnt)
                elps.append(ellipse)

        # Find two elipses with same centers
        candidates = []
        for n in range(len(elps)):
            for m in range(n + 1, len(elps)):
                e1 = elps[n]
                e2 = elps[m]
                dist = np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
                #             print dist
                if dist < 5:
                    candidates.append((e1, e2))
        # if len(candidates):
        #     print("Processing is done! found", len(candidates), "candidates for rings")

        # try:
        #     depth_img = rospy.wait_for_message('/camera/depth/image_raw', Image)
        # except Exception as e:
        #     print(e)

        okay = 0
        # Extract the depth from the depth image
        for c in candidates:
            # the centers of the ellipses
            e1 = c[0]
            e2 = c[1]

            # drawing the ellipses on the image
            # cv2.ellipse(cv_image, e1, (0, 0, 0), 0)
            # cv2.ellipse(cv_image, e2, (0, 0, 0), 0)

            size = (e2[1][0] + e2[1][1]) / 2
            center = (e1[0][1], e1[0][0])

            x1 = int(center[0] - size / 2)
            x2 = int(center[0] + size / 2)
            x_min = x1 if x1 > 0 else 0
            x_max = x2 if x2 < cv_image.shape[0] else cv_image.shape[0]

            y1 = int(center[1] - size / 2)
            y2 = int(center[1] + size / 2)
            y_min = y1 if y1 > 0 else 0
            y_max = y2 if y2 < cv_image.shape[1] else cv_image.shape[1]

            # depth_image = self.bridge.imgmsg_to_cv2(depth_img, "32FC1")
            center = cv_image[(x_max-+x_min)//2, (y_max + y_min)//2, :]
            # print(center, np.sum(center) / 3)
            if not (160 < np.sum(center) / 3 < 185):
                rospy.loginfo("Fake loop :(")
                continue

            # OBREŽEMO SLIKO, DA JE NOTRI SAMO OBROČ
            detect_cylinder = np.zeros_like(cv_image)
            zunanja = copy.deepcopy(e2)
            sez = list(zunanja)
            sez[1] = tuple([(e2[1][0] + e1[1][0]) / 2, (e2[1][1] + e1[1][1]) / 2])

            cv2.ellipse(detect_cylinder, tuple(sez), (255, 255, 255), 0)
            xes, yes = np.where(np.sum(detect_cylinder, axis=2) > 0)
            x_min, x_max = min(xes), max(xes)
            y_min, y_max = min(yes), max(yes)

            # IZRAČUNAMO MARKER IN GA OBJAVIMO
            cutout = cv_image[x_min-2:x_max+2, y_min-2:y_max+2, :]
            depth_cutout = depth_image[x_min-2:x_max+2, y_min-2:y_max+2]
            if depth_cutout[(x_max-x_min)//2, (y_max - y_min)//2] > -1:
                rospy.loginfo("Fake loop :(")
                continue
            okay += 1

            # where_nan = np.isnan(depth_image)
            # depth_image[where_nan] = 0
            try:
                rospy.loginfo(f"{rgb_image_message.header.stamp=} {depth_image_message.header.stamp=}")
                self.get_pose(
                    e1,
                    float(np.nanmean(depth_image[x_min:x_max, y_min:y_max])),
                    depth_image_message.header.stamp
                )
            except tf2_ros.ExtrapolationException as e:
                rospy.loginfo(f"Error with extrtrapolation: {e}")

            # DOBIMO BARVO
            img_path = f"{rospy.get_time()}.jpg"
            if not self.images:
                self.tempdir = tempfile.TemporaryDirectory()

            cv2.imwrite(os.path.join(self.tempdir.name, img_path), cutout)
            self.images.append(os.path.join(self.tempdir.name, img_path))
            if len(self.images) == 5:
                all_imgs = []
                for some_iamge in self.images:
                    img = cv2.imread(some_iamge, cv2.IMREAD_COLOR)
                    # input mora bit openCV rgb slika
                    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    img = cv2.resize(img, (400, 300))
                    all_imgs.append(img)
                rospy.loginfo("Color " + classify_wrapper(all_imgs))
                # print(center, np.sum(center) / 3)
                self.images = []
                self.tempdir.cleanup()
                # time.sleep(100)

            break

        if okay > 0:
            cv2.imshow("Image window", cv_image[x_min:x_max, y_min:y_max, :])
            cv2.waitKey(1)

    def depth_callback(self, data):
        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "16UC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessary conversion so we can visuzalize it in OpenCV
        image_1 = depth_image / 65536.0 * 255
        image_1 = image_1 / np.max(image_1) * 255

        image_viz = np.array(image_1, dtype=np.uint8)

        cv2.imshow("Depth window", image_viz)
        cv2.waitKey(1)


def main():
    ring_finder = The_Ring()

    rate = rospy.Rate(1)
    while not rospy.is_shutdown():
        start = time.time()
        ring_finder.image_callback()
        # print(f"Needed {time.time() - start}s to execute that :)")
        rate.sleep()

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
